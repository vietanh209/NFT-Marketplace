/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace NFTAuction {
  export type OfferStruct = {
    bidder: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    active: PromiseOrValue<boolean>;
  };

  export type OfferStructOutput = [string, BigNumber, BigNumber, boolean] & {
    bidder: string;
    price: BigNumber;
    timestamp: BigNumber;
    active: boolean;
  };
}

export interface NFTAuctionInterface extends utils.Interface {
  functions: {
    "acceptOffer(uint256)": FunctionFragment;
    "cancelAllOffers(uint256)": FunctionFragment;
    "getHighestBidder(uint256)": FunctionFragment;
    "getOffers(uint256)": FunctionFragment;
    "handleFundTransfer(address,uint256)": FunctionFragment;
    "makeOffer(uint256,uint256,uint256)": FunctionFragment;
    "tokenIdToOffers(uint256,uint256)": FunctionFragment;
    "unmakeOffer(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOffer"
      | "cancelAllOffers"
      | "getHighestBidder"
      | "getOffers"
      | "handleFundTransfer"
      | "makeOffer"
      | "tokenIdToOffers"
      | "unmakeOffer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAllOffers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHighestBidder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "handleFundTransfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOffer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToOffers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unmakeOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAllOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHighestBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOffers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleFundTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unmakeOffer",
    data: BytesLike
  ): Result;

  events: {
    "OfferAccepted(uint256,address,uint256)": EventFragment;
    "OfferCanceled(uint256,address)": EventFragment;
    "OfferMade(uint256,address,uint256,uint256)": EventFragment;
    "OffersExpired(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OfferAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OffersExpired"): EventFragment;
}

export interface OfferAcceptedEventObject {
  tokenId: BigNumber;
  bidder: string;
  price: BigNumber;
}
export type OfferAcceptedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  OfferAcceptedEventObject
>;

export type OfferAcceptedEventFilter = TypedEventFilter<OfferAcceptedEvent>;

export interface OfferCanceledEventObject {
  tokenId: BigNumber;
  bidder: string;
}
export type OfferCanceledEvent = TypedEvent<
  [BigNumber, string],
  OfferCanceledEventObject
>;

export type OfferCanceledEventFilter = TypedEventFilter<OfferCanceledEvent>;

export interface OfferMadeEventObject {
  tokenId: BigNumber;
  bidder: string;
  price: BigNumber;
  timestamp: BigNumber;
}
export type OfferMadeEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  OfferMadeEventObject
>;

export type OfferMadeEventFilter = TypedEventFilter<OfferMadeEvent>;

export interface OffersExpiredEventObject {
  tokenId: BigNumber;
  count: BigNumber;
}
export type OffersExpiredEvent = TypedEvent<
  [BigNumber, BigNumber],
  OffersExpiredEventObject
>;

export type OffersExpiredEventFilter = TypedEventFilter<OffersExpiredEvent>;

export interface NFTAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTAuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOffer(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelAllOffers(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getHighestBidder(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getOffers(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[NFTAuction.OfferStructOutput[]]>;

    handleFundTransfer(
      seller: PromiseOrValue<string>,
      highestPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeOffer(
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenIdToOffers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        bidder: string;
        price: BigNumber;
        timestamp: BigNumber;
        active: boolean;
      }
    >;

    unmakeOffer(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOffer(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelAllOffers(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getHighestBidder(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  getOffers(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<NFTAuction.OfferStructOutput[]>;

  handleFundTransfer(
    seller: PromiseOrValue<string>,
    highestPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeOffer(
    tokenId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenIdToOffers(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean] & {
      bidder: string;
      price: BigNumber;
      timestamp: BigNumber;
      active: boolean;
    }
  >;

  unmakeOffer(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOffer(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAllOffers(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getHighestBidder(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getOffers(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<NFTAuction.OfferStructOutput[]>;

    handleFundTransfer(
      seller: PromiseOrValue<string>,
      highestPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    makeOffer(
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenIdToOffers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        bidder: string;
        price: BigNumber;
        timestamp: BigNumber;
        active: boolean;
      }
    >;

    unmakeOffer(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OfferAccepted(uint256,address,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      bidder?: null,
      price?: null
    ): OfferAcceptedEventFilter;
    OfferAccepted(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      bidder?: null,
      price?: null
    ): OfferAcceptedEventFilter;

    "OfferCanceled(uint256,address)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      bidder?: null
    ): OfferCanceledEventFilter;
    OfferCanceled(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      bidder?: null
    ): OfferCanceledEventFilter;

    "OfferMade(uint256,address,uint256,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      bidder?: null,
      price?: null,
      timestamp?: null
    ): OfferMadeEventFilter;
    OfferMade(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      bidder?: null,
      price?: null,
      timestamp?: null
    ): OfferMadeEventFilter;

    "OffersExpired(uint256,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      count?: null
    ): OffersExpiredEventFilter;
    OffersExpired(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      count?: null
    ): OffersExpiredEventFilter;
  };

  estimateGas: {
    acceptOffer(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelAllOffers(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getHighestBidder(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOffers(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleFundTransfer(
      seller: PromiseOrValue<string>,
      highestPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeOffer(
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenIdToOffers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unmakeOffer(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOffer(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelAllOffers(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getHighestBidder(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOffers(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleFundTransfer(
      seller: PromiseOrValue<string>,
      highestPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeOffer(
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenIdToOffers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unmakeOffer(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
