/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace TransferFunds {
  export type TransferFundsStruckStruct = {
    sender: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    message: PromiseOrValue<string>;
    timestamps: PromiseOrValue<BigNumberish>;
  };

  export type TransferFundsStruckStructOutput = [
    string,
    string,
    BigNumber,
    string,
    BigNumber
  ] & {
    sender: string;
    receiver: string;
    amount: BigNumber;
    message: string;
    timestamps: BigNumber;
  };
}

export interface TransferFundsInterface extends utils.Interface {
  functions: {
    "addDataToBlockChain(address,uint256,string)": FunctionFragment;
    "getAllTransaction()": FunctionFragment;
    "getTransactionCount()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addDataToBlockChain"
      | "getAllTransaction"
      | "getTransactionCount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addDataToBlockChain",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTransaction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addDataToBlockChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionCount",
    data: BytesLike
  ): Result;

  events: {
    "TransferEvent(address,address,uint256,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TransferEvent"): EventFragment;
}

export interface TransferEventEventObject {
  from: string;
  receiver: string;
  amount: BigNumber;
  message: string;
  timestamp: BigNumber;
}
export type TransferEventEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  TransferEventEventObject
>;

export type TransferEventEventFilter = TypedEventFilter<TransferEventEvent>;

export interface TransferFunds extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TransferFundsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDataToBlockChain(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllTransaction(
      overrides?: CallOverrides
    ): Promise<[TransferFunds.TransferFundsStruckStructOutput[]]>;

    getTransactionCount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addDataToBlockChain(
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    message: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllTransaction(
    overrides?: CallOverrides
  ): Promise<TransferFunds.TransferFundsStruckStructOutput[]>;

  getTransactionCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addDataToBlockChain(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllTransaction(
      overrides?: CallOverrides
    ): Promise<TransferFunds.TransferFundsStruckStructOutput[]>;

    getTransactionCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "TransferEvent(address,address,uint256,string,uint256)"(
      from?: null,
      receiver?: null,
      amount?: null,
      message?: null,
      timestamp?: null
    ): TransferEventEventFilter;
    TransferEvent(
      from?: null,
      receiver?: null,
      amount?: null,
      message?: null,
      timestamp?: null
    ): TransferEventEventFilter;
  };

  estimateGas: {
    addDataToBlockChain(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllTransaction(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addDataToBlockChain(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllTransaction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTransactionCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
